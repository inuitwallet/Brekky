

Extend user model with profile
Profile -

Transactions

id | amount | payment method | type | address | complete




Workflow

Butter -
1) user decides whether to buy or sell Nubits
Buy:
    - brekky shows user how many Nubits are available and the price
    - user chooses how many to purchase
    - user enters payment address
    - user chooses payment method (html form / button method)
    - brekky saves details of incomplete transaction to database
    - chosen payment method is contacted
    Confirmation:
        - confirmation of funds transfer is received from chosen service
        - brekky updates completion status of transaction in the database
        - brekky sends NuBits to user
    Unconfirmed:
        - no confirmation or denial received from payment service
        - brekky informs user of failure
Sell:
    - brekky shows user funds available to buy NuBits
    - user chooses amount
    - user chooses a payment method (api method)
    - user enters payment method details (account number/email)
    - brekky saves incomplete transaction to database
    - brekky displays NBT address to user and timer?
    - brekky monitors nbt wallet for transaction for x time
    Tx Received:
        - brekky completes transaction with payment provider
        - brekky displays confirmation to user
        - brekky saves transaction completion status to database
    Tx not received
        - brekky informs user of failure

requirements
    - nud wrapper
        - check balance
        - confirm Tx
        - send funds to address
        - cold storage backup?


Toast:

2 types of user. Content providers (bakers) and content consumers (toasters) 

Bakers: 
Plugin to api. 
API provides an address tied to their brekky account
They display that to their consumer who pays the amount requested (either directly or with eggs? (brekky tokens) 
Once the payment is confirmed the brekky api informs the bakers system that the payment is complete and they allow access to their content
-----------
Daemon service:
-----------

Endpoints:
    /new =  daemon service generates two 128 bit mnemonics.
            it uses both to generate a bip32 extended public key
            it saves one mnemonic
            it outputs json containing the second mnemonic, a unique id and the extpub
            calling service saves the displayed mnemonic and the extpub
            extpub can be used to generate new addresses
            when new address is generated, calling service sends request to daemon
            service
